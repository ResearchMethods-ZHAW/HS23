---
execute:
  echo: true
format:
  html:
    code-tools:
      source: true
---

## 6. Modellgüte und -diagnostics MM / Habitatselektionsmodell - Lösung

### Libraries laden

Neue packages die wir für die Modelle und die Diagnostics brauchen

```{r}
#| results: hide


# neue Packages: DHARMa, car, MASS, ROCR, sjPlot, sjstats, ggeffects, cowplot, gstat

ipak <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg)) 
    install.packages(new.pkg, repos = "http://cran.us.r-project.org", dependencies = TRUE)
  sapply(pkg, require, character.only = TRUE)
}

packages <- c("lme4", "bbmle", "MuMIn", "tidyverse", "DHARMa", "car", "MASS", "ROCR", 
              "sjPlot",  "ggeffects", "sjstats", "cowplot", "magrittr", "gstat")

ipak(packages)
```

### Ausgangslage

- Der Modellfit von letzter Woche als Ausgangspunkt für die heutige Übung

```{r}
#| tidy: true
#| fig.keep: none


#| results: hide
DF_mod_day <- read_delim("fallstudie_n/data/Aufgabe4_Datensatz_Habitatnutzung_Modelle_20221031_moodle.csv", 
                         delim = ";") %>%
  filter(time_of_day == "day") %>%
  mutate(slope_scaled = scale(slope),
         us_scaled = scale(us),
         os_scaled = scale(os),
         forest_prop_scaled = scale(forest_prop),
         dist_road_all_scaled = scale(dist_road_all),
         dist_road_only_scaled = scale(dist_road_only),
         dist_build_scaled = scale(dist_build),
         id = as.factor(id))

f <- pres_abs ~
  slope_scaled +
  us_scaled +
  os_scaled +
  forest_prop_scaled +
  dist_road_only_scaled +
  dist_build_scaled

f <- paste(c(f, "+ (1 | id)"), collapse = " ") %>% as.formula()

m_day <- glmer(f, data= DF_mod_day, family = binomial, na.action = "na.fail")

all_m <- dredge(m_day)

avgmodel <- model.avg(all_m, rank="AICc", subset = delta < 2)
summary(avgmodel)
```

- Die Modellresultate aus dem avgmodel sind grundätzlich die finalen Resultate die bereits interpretiert werden könnten. Allerdings funktionieren die Diagnosetests und die Darstellung der Resultate mit diesem gemittelten Modell nicht sehr gut, weshalb wir einen re-fit mit glmer machen müssen (an den Resultaten ändert sich dadurch nichts) 

```{r}

# hier noch zum Vergleich, dass die Resulate sich nur marginal verändern 

summary(m_day)

# https://stats.stackexchange.com/questions/153611/interpreting-random-effect-variance-in-glmer

# 95% range of the roe deer effects is approximately: -0.97 - 0.97
```

### Aufgabe 1

Berechung der AUC (area under the receiver operating characteristic curve)**= Mass der Modellgüte**

Für die Berechnung des AUC findet ihr weiterführende Informationen unter: [Link](https://www.wsl.ch/staff/niklaus.zimmermann/programs/progs/simtest.pdf) 

```{r}

prob <- predict(m_day,type=c("response"))   
pred <- prediction(prob, DF_mod_day$pres_abs)    

# AUC

auc <- performance(pred, measure = "auc")@y.values[[1]]
auc
```

### Aufgabe 2

Interpretieren der Modell-Residuen mittels Tests auf verschiedene Aspekte

- Model testing for over/underdispersion, zeroinflation and spatial autocorrelation following the DHARMa package.
- unbedingt die Vignette des DHARMa-Package konsultieren: [Link](https://cran.r-project.org/web/packages/DHARMa/vignettes/DHARMa.html)

```{r}

# Residuals werden über eine Simulation auf eine Standard-Skala transformiert und 
# können anschliessend getestet werden. Dabei kann die Anzahl Simulationen eingestellt 
# werden (dauert je nach dem sehr lange)

simulationOutput <- simulateResiduals(fittedModel = m_day, n = 10000)

# plotting and testing scaled residuals

plot(simulationOutput)

testResiduals(simulationOutput)

# The most common concern for GLMMs is overdispersion, underdispersion and 
# zero-inflation.

# separate test for dispersion

testDispersion(simulationOutput)

# test for Zeroinflation

testZeroInflation(simulationOutput)

# test for spatial Autocorrelation

# calculating x, y positions per group
groupLocations = aggregate(DF_mod_day[, 3:4], list(DF_mod_day$x, DF_mod_day$y), mean)
groupLocations$group <- paste(groupLocations$Group.1,groupLocations$Group.2)

# calculating residuals per group
res2 = recalculateResiduals(simulationOutput, group = groupLocations$group)

# running the spatial test on grouped residuals
testSpatialAutocorrelation(res2, groupLocations$x, groupLocations$y, plot = F)

# Testen auf Multicollinearität (dh zu starke Korrelationen im finalen Modell, zB falls 
# auf Grund der ökologischen Plausibilität stark korrelierte Variablen im Modell)
# use VIF values: if values less then 5 is ok (sometimes > 10), if mean of VIF values 
# not substantially greater than 1 (say 5), no need to worry.

car::vif(m_day)
mean(car::vif(m_day))
```

### Aufgabe 4 

Ermittlung des individuellen Beitrags der einzelen Variablen im Gesamtmodell

- **Bestimmen delta AIC nach Coppes et al. 2017 -> Vergleich des Gesamtmodells gegenüber einem Modell ohne die entsprechende Variable.**
- **Auftrag auf den 22.11.2021: Jede Gruppe kurze Vorstellung der Modellresultate & Diagnostics im Plenum und Diskussion der Ergebnisse (keine PP-Präsentation nötig)**

```{r}

m_os <- glmer(pres_abs ~
  dist_build_scaled +
  dist_road_only_scaled +
  forest_prop_scaled +
  slope_scaled +
  us_scaled +
  (1|id), data= DF_mod_day, family = binomial, na.action = "na.fail")

m_us <- glmer(pres_abs ~
  dist_build_scaled +
  dist_road_only_scaled +
  forest_prop_scaled +
  slope_scaled +
  os_scaled +
  (1|id), data= DF_mod_day, family = binomial, na.action = "na.fail")

m_road <- glmer(pres_abs ~
  dist_build_scaled +
  forest_prop_scaled +
  slope_scaled +
  us_scaled +
  os_scaled +
  (1|id), data= DF_mod_day, family = binomial, na.action = "na.fail")

m_forest <- glmer(pres_abs ~
  dist_build_scaled +
  dist_road_only_scaled +
  slope_scaled +
  us_scaled +
  os_scaled +
  (1|id), data= DF_mod_day, family = binomial, na.action = "na.fail")

m_build <- glmer(pres_abs ~
  dist_build_scaled +
  dist_road_only_scaled +
  forest_prop_scaled +
  slope_scaled +
  us_scaled +
  os_scaled +
  (1|id), data= DF_mod_day, family = binomial, na.action = "na.fail")

m_slope <- glmer(pres_abs ~
  dist_build_scaled +
  dist_road_only_scaled +
  forest_prop_scaled +
  us_scaled +
  os_scaled +
  (1|id), data= DF_mod_day, family = binomial, na.action = "na.fail")

bbmle::AICtab(m_day, m_os, m_us, m_road, m_forest, m_build, m_slope)
```
