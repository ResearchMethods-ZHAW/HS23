---
execute:
  echo: true
format:
  html:
    code-tools:
      source: true
---

# 5. Variablenselektion Multivariate Modelle / Habitatselektionsmodell - Lösung

### Libraries laden

```{r}
#| output: false
### Funktion um Packages direkt zu installieren und / oder zu laden

ipak <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg)) 
    install.packages(new.pkg, repos = "http://cran.us.r-project.org", dependencies = TRUE)
  sapply(pkg, require, character.only = TRUE)
}

packages <- c("sp", "raster", "tidyverse", "PerformanceAnalytics", "pastecs", "lme4", 
              "bbmle", "MuMIn", "MASS", "magrittr")

ipak(packages)
```

### Variablenselektion
**-> Vorgehen analog Coppes et al.**

### Aufgabe 1

Mit dem folgenden Code kann eine simple Korrelationsmatrix aufgebaut werden.

```{r}
DF_mod <- read_delim("fallstudie_n/data/Aufgabe4_Datensatz_Habitatnutzung_Modelle_20221031_moodle.csv", 
                     delim = ";")

DF_mod_day <- DF_mod |>
  filter(time_of_day == "day")

round(cor(DF_mod_day[,6:12], method = "kendall"),2)

# hier kann die Schwelle für die Korrelation gesetzt werden, 0.7 ist liberal / 
# 0.5 konservativ

cor <- round(cor(DF_mod_day[,6:12], method = "kendall"),2) 
cor[abs(cor)<0.7] <-0
cor
```

### Aufgabe 2

**Selektion der Variablen in einem univariaten Model**

Skalieren der Variablen, damit ihr Einfluss vergleichbar wird (Problem verschiedene Skalen der Variablen (bspw. Neigung in Grad, Distanz in Metern))

```{r}

DF_mod_day %<>%
  mutate(slope_scaled = scale(slope),
         us_scaled = scale(us),
         os_scaled = scale(os),
         forest_prop_scaled = scale(forest_prop),
         dist_road_all_scaled = scale(dist_road_all),
         dist_road_only_scaled = scale(dist_road_only),
         dist_build_scaled = scale(dist_build),
         id = as.factor(id))
```

### Aufgabe 3

Ein erstes GLMM (Generalized Linear Mixed Effects Modell) aufbauen: Funktion und Modelformel

> wichtige [Seite](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html) auf der man viele Hilfestellungen zu GLMM’s finden kann.

```{r}

# wir werden das package lme4 mit der Funktion glmer verwenden 

# die Hilfe von glmer aufrufen: ?glmer

# glmer(formula, data = , family = binomial)

# 1) formula: 
# Abhängige Variable ~ Erklärende Variable + Random Factor 
# In unseren Modellen kontrollieren wir für individuelle Unterschiede bei den Rehen 
# indem wir einen Random Factor definieren => (1 | id) 

# 2) data: 
# euer Datensatz

# 3) family: 
# hier binomial

# warum binomial? Verteilung Daten der Abhängigen Variable Präsenz/Absenz 

ggplot(DF_mod_day, aes(pres_abs)) + geom_histogram()

# --> Binäre Verteilung => Binomiale Verteilung mit n = 1 

# und wie schaut die Verteilung der Daten der Abhängigen Variable Nutzungsintensität 
# (nmb, werden wir in diesem Kurs aber nicht genauer anschauen) aus?
```

### Aufgabe 4

Mit der GLMM Formel bauen wir in einem ersten Schritt eine univariate Variablenselektion auf.

**Als abhängige Variable verwenden wir in der ersten Phase die Präsenz/Absenz der Rehe in den Kreisen**

```{r}
#| tidy: true
#| eval: false

# Die erklärende Variable in m1 ist die erste Variable der korrelierenden Beziehung
# Die erklärende Variable in m2 ist die zweite Variable der korrelierenden Beziehung

# Hier ein Beispiel: Tagmodell Distanz zu Strassen und Wegen versus Distanz zu Strassen

m1 <- glmer(pres_abs ~ dist_road_all_scaled + (1 | id), data = DF_mod_day, 
            family = binomial)
m2 <- glmer(pres_abs ~ dist_road_only_scaled + (1 | id), data = DF_mod_day, 
            family = binomial)

# mit dieser Funktion können die Modellergebnisse inspiziert werden
summary(m1)

# Mit dieser Funktion kann der Informationgehalt der beiden Modelle gegeneinander 
# abgeschätzt werden
bbmle::AICtab(m1, m2)

# tieferer AIC -> besser (AIC = Akaike information criterion) -> als deltaAIC ausgewiesen
# besser == Distanz zu Strassen

# ==> dieses Vorgehen muss nun für alle korrelierten Variablen für jeden Teildatensatz 
# (geringe Störung/starke Störung) durchgeführt werden, um nur noch nicht (R < 0.7) 
# korrelierte Variablen in das Modell einfliessen zu lassen 
```

### Aufgabe 5

**Selektion der Variablen in einem multivariaten Model**

Mit folgendem Code kann eine automatisierte Variablenselektion (dredge-Funktion) und ein Modelaveraging aufgebaut werden (siehe auch Stats-Skript von J.Dengler & Team)

```{r }
# hier wird die Formel für die dredge-Funktion vorbereitet (die Variablen V1-V6 
# sind jene welche nach der univariaten Variablenselektion noch übrig bleiben)  

f <- pres_abs ~ 
  slope_scaled +
  us_scaled +
  os_scaled +
  forest_prop_scaled +
  dist_road_only_scaled +
  dist_build_scaled 

# inn diesem Befehl kommt der Random-Factor (das Reh) hinzu und es wird eine Formel 
# daraus gemacht

f_dredge <- paste(c(f, "+ (1 | id)"), collapse = " ") %>% as.formula()

# Das Modell mit dieser Formel ausführen

m <- glmer(f_dredge, data = DF_mod_day, family = binomial, na.action = "na.fail")

# Das Modell in die dredge-Funktion einfügen (siehe auch unbedingt ?dredge)

all_m <- dredge(m)

# Importance values der einzelnen Variablen (Gibt an, wie bedeutsam eine bestimmte 
# Variable ist, wenn man viele verschiedene Modelle vergleicht (multimodel inference))

sw(all_m)

# Schlussendlich wird ein Modelaverage durchgeführt (Schwellenwert für das delta-AIC = 2)

avgmodel <- model.avg(all_m, rank="AICc", subset = delta < 2)
summary(avgmodel)

# ==> für alle weiteren Datensätze muss der gleiche Prozess der Variablenselektion 
# durchgespielt werden. 
```
