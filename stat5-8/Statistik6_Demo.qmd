---
date: 2022-11-15
lesson: Stat6
thema: Einführung in "multivariate" Methoden
index: 1
format:
  html:
    code-tools:
      source: true
---

# Stat6: Demo

-   Download dieses Demoscript via "\</\>Code" (oben rechts)

## Ordinationen I

### PCA

```{r}

if(!require(labdsv)){install.packages("labdsv")}
library(labdsv)

# Für Ordinationen benötigen wir Matrizen, nicht Dataframes
# Generieren von Daten
raw <- matrix(c(1, 2, 2.5, 2.5, 1, 0.5, 0, 1, 2, 4, 3, 1), nrow = 6)
colnames(raw) <- c("Art1", "Art2")
rownames(raw) <- c("Ort1", "Ort2", "Ort3", "Ort4", "Ort5", "Ort6")
raw

# Originaldaten für Plot separieren
x1 <- raw[,1]
y1 <- raw[,2]
z <- c(rep(1:6)) 

# Plot Abhängigkeit der Arten vom Umweltgradienten
plot(c(x1, y1)~c(z, z), type = "n", axes = T, bty = "l", 
     las = 1, xlim = c(1,6), ylim = c(0,5),
     xlab = "Umweltgradient", ylab = "Deckung der Arten")
points(x1~z, pch = 21, type = "b")
points(y1~z, pch = 16, type = "b")
text(1.5, 1.5, "Art 1", col = "darkgray")
text(1.5, 0.5, "Art 2", col = "darkgray")

# Daten zentrieren
# d.h. transformieren so, dass Mittelwert = 0
cent <- scale(raw, scale = FALSE)
x2 <- cent[,1] # für nachfolgenden Plot speichern
y2 <- cent[,2] # für nachfolgenden Plot speichern

# Daten zusätzlich rotieren 
# PCA zentriert und rotiert Daten
o.pca <- pca(raw)
x3 <- o.pca$scores[,1] # für nachfolgenden Plot speichern
y3 <- o.pca$scores[,2] # für nachfolgenden Plot speichern

# Visualisierung der Schritte im Ordinationsraum
plot(c(y1, y2, y3)~c(x1, x2, x3), type = "n", axes = T, bty = "l", las = 1,
     xlim = c(-4, 4), ylim = c(-4, 4), xlab = "Art 1", ylab=  "Art 2")
points(y1~x1, pch = 21, type = "b", col = "green", lwd = 2)
text(-2.5, 4, "Originaldaten", col = "green")
points(y2~x2, pch = 16, type = "b",col = "red", lwd = 2)
text(-2.5, 3.5, "Zentriert", col = "red")
points(y3~x3, pch = 17, type = "b", col = "blue", lwd = 2)
text(-2.5, 3, "Zentriert & rotiert", col = "blue")


# Durchführung der PCA
o.pca <- pca(raw)
plot(o.pca)

# Koordinaten im Ordinationsraum
o.pca$scores

# Korrelationen der Variablen mit den Ordinationsachsen
o.pca$loadings

# Erklärte Varianz der Achsen
E <- o.pca$sdev^2 / o.pca$totdev * 100
E

# Visualisieren mit prcomp
pca.2 <- prcomp(raw, scale = F)
summary(pca.2)
plot(pca.2) # 
biplot(pca.2)

# mit vegan
if(!require(vegan)){install.packages("vegan")}
library("vegan")
# Die Funktion rda führt ein PCA aus an wenn nicht Artdaten UND Umweltdaten definiert werden
pca.3 <- rda(raw, scale = FALSE)
#scores(pca.3, display = c("sites"))
#scores(pca.3, display = c("species"))
summary(pca.3, axes = 0)
biplot(pca.3)


```

```{r}
# Mit Beispieldaten aus Wildi
if(!require(dave)){install.packages("dave")}
library(dave)
#| eval: false
str(sveg)
summary(sveg)
names(sveg)
```

```{r}
# PCA: Deckungen Wurzeltransformiert, cor=TRUE erzwingt Nutzung der Korrelationsmatrix
pca.5 <- pca(sveg^0.25, cor = TRUE)
```

```{r}
#| eval: false
# Koordinaten im Ordinationsraum
pca.5$scores

# Korrelationen der Variablen mit den Ordinationsachsen
pca.5$loadings
```

```{r}

# Erklärte Varianz der Achsen in Prozent (sdev ist die Wurzel daraus)
E <- pca.5$sdev^2 / pca.5$totdev * 100
E
E[1:5]
plot(pca.5)
# PCA-Plot der Lage der Beobachtungen im Ordinationsraum
plot(pca.5$scores[,1], pca.5$scores[,2], type = "n", asp = 1, xlab = "PC1", ylab = "PC2")
points(pca.5$scores[,1], pca.5$scores[,2], pch = 18)

# Subjektive Auswahl von Arten zur Darstellung
sel.sp <- c(3, 11, 23, 39, 46, 72, 77, 96)
snames <- names(sveg[,sel.sp])
snames

# PCA-Plot der Korrelationen der Variablen (hier Arten) mit den Achsen (h)
x <- pca.5$loadings[,1]
y <- pca.5$loadings[,2]
plot(x, y, type = "n", asp = 1)
arrows(0,0, x[sel.sp], y[sel.sp], length = 0.08)
text(x[sel.sp], y[sel.sp], snames, pos = 1, cex = 0.6)

# Mit vegan
pca.6 <- rda(sveg^0.25, scale = TRUE)
# Erklärte Varianz der Achsen
summary(pca.6, axes = 0)
# PCA-Plot der Lage der Beobachtungen im Ordinationsraum
biplot(pca.6, display = "sites", type = "points", scaling = 1)
# Subjektive Auswahl von Arten zur Darstellung
sel.sp <- c(3, 11, 23, 39, 46, 72, 77, 96)
snames <- names(sveg[,sel.sp])
snames
# PCA-Plot der Korrelationen der Variablen (hier Arten) mit den Achsen (h)
scores <- scores(pca.6, display = "species")
x <- scores[,1]
y <- scores[,2]
plot(x, y, type = "n", asp = 1)
arrows(0,0, x[sel.sp], y[sel.sp], length = 0.08)
text(x[sel.sp], y[sel.sp], snames, pos = 1, cex = 0.6)

# Mit angepassten Achsen
plot(x, y, type = "n", asp = 1, xlim = c(-1, 1), ylim = c(-0.6, 0.6))
arrows(0,0, x[sel.sp], y[sel.sp], length = 0.08)
text(x[sel.sp], y[sel.sp], snames, pos = 1, cex = 0.6)


```

### CA

```{r}

ca.1 <- cca(sveg^0.5)
# Arten (o) und Communities (+) plotten
plot(ca.1)

# Nur Arten plotten
plot(ca.1, display = "species", type = "points")


# Anteilige Varianz, die durch die ersten beiden Achsen erklärt wird
ca.1$CA$eig[1:2] / sum(ca.1$CA$eig)

summary(eigenvals(ca.1))
```

### DCA

```{r}

library(vegan)
dca.1 <- decorana(sveg, mk = 10)
plot(dca.1, display = "sites", type = "point")

dca.2 <- decorana(sveg, mk = 100)
plot(dca.2, display = "sites", type = "point")
```

### NMDS

```{r}
# Distanzmatrix als Start erzeugen (PCA)
mde <- vegdist(sveg, method = "euclidean")

# Alternative mit einem für Vegetationsdaten häufig verwendeten Dissimilarity-index
mde <- vegdist(sveg, method = "bray")

#Z wei verschiedene NMDS-Methoden
if(!require(MASS)){install.packages("MASS")}
library(MASS)
set.seed(1) # macht man, wenn man bei einer Wiederholung exakt die gleichen Ergebnisse will
imds <- isoMDS(mde, k = 2)
set.seed(1)
mmds <- metaMDS(mde, k = 2)

plot(imds$points)
plot(mmds$points)

#Stress = S² = Abweichung der zweidimensionalen NMDS-Lösung von der originalen Distanzmatrix
stressplot(imds, mde)
stressplot(mmds, mde)
```
