---
date: 2023-10-24
lesson: Deskriptive Analysen
thema: Explorativ / Beschreibend
index: 2
execute: 
  echo: false   # set to true to show musterlösung
  output: false
code-fold: true
code-summary: "Musterlösung"
knitr:
  opts_chunk: 
    collapse: true
---

# Deskriptive Analysen

```{r include=FALSE, echo = FALSE}

```


































## Aufgabe 1: Verlauf der Besuchszahlen / m

## 1a)

Nachdem wir die Projektstruktur aufgebaut haben und die Daten vorbereitet (inkl. aggregiert) sind, machen wir uns an die deskriptive Analyse. Dies macht eigentlich immer Sinn. Bevor mach sich an die schliessende Statistik macht, muss man ein "Gefühl" für die Daten bekommen. Dies funktioniert am einfachsten mit explorativen Analysen.

Wir interessieren uns in den Analysen für 5 Zeitabschnitte:

1. von Anfang Untersuchungsperiode bis 1 Jahr vor Lockdown 1 (pre)
2. 1 Jahr vor Corona (normal)
3. Lockdown 1
4. Lockdown 2
5. Ende 2. Lockdown bis Ende Untersuchungsperiode

- Plottet den Verlauf der monatlichen Besuchszahlen an eurer Zählstelle. Auf der x-Achse steht dabei dabei Jahr und Monat (gespeichert im df _depo_m_), auf der y-Achse die monatlichen Besuchszahlen. Zeichnet auch die beiden Lockdown ein (Hinweis: rundet das Start- und Enddatum der Lockdowns auf den Monat, da im Plot die monatlichen Zahlen gezeigt werden).

Haltet euch dabei an untenstehenden Plot:


```{r echo=FALSE}
ggplot(depo_m, mapping = aes(Ym, Total, group = 1)) + # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird
    # zeichne Lockdown 1
  geom_rect(
    mapping = aes(
      xmin = ym("2020-3"), xmax = ym("2020-5"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))
    ),
    fill = "lightskyblue", alpha = 0.2, colour = NA
  ) +
  # zeichne Lockdown 2
  geom_rect(
    mapping = aes(
      xmin = ym("2020-12"), xmax = ym("2021-3"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))
    ),
    fill = "lightskyblue", alpha = 0.2, colour = NA
  ) +
  geom_line(alpha = 0.6, size = 1.5) +
  labs(title = "", y = "Fussgänger:innen pro Monat", x = "Jahr") +
  theme_linedraw(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

__Hinweis:__ 
- Nutzt zum plotten __ggplot()__
- folgende Codeschnipsel helfen euch:

```{r eval=FALSE}
ggplot(data = depo_m, mapping = aes(Ym, Total, group = 1)) + # group 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird
    # zeichne Lockdown 1; ein einfaches Rechteck. bestimme mit min und max die Dimensionen
  geom_rect(
    mapping = aes(
      xmin = ym("2020-3"), xmax = ym("2020-5"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))
    ), # das Rechteck soll 10 % grösser als die maximale Besuchszahl sein
    fill = "lightskyblue", alpha = 0.2, colour = NA
  ) +
  # zeichne Lockdown 2
  ... +
  # zeichne die Linie
  geom_line(...) +
  theme_linedraw(base_size = 15) +
  ...
```

- Exportiert euren Plot mit __ggsave()__ nach __results__. Breite = 20, Höhe = 10, Einheiten = cm, dpi = 1000

## 1b)

Nachdem wir wissen, wie sich die Besuchszahlen allgemein entwickelt haben, untersuchen wir wie sich diese während den unterschiedlichen Tageszeiten entwickelten.

- Wie benötigen dazu wieder denselben Datensatz, dieselben x- und y-Achsen. Allerdings ergänzen wir den area-plot mit dem "fill"-Argument:

- Speichert auch diesen Plot.

```{r eval=FALSE}
ggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +
  geom_area(position = "fill") +
  ...
```

## Aufgabe 2: Wochengang

Nachdem wir nun wissen, wie sich die Besuchszahlen während der Untersuchungsdauer monatlich entwickelt haben, möchten wir genauer untersuchen, wie sich die Zahlen je nach Phase (Pre, Normal, Lockdown 1, Lockdown 2 und Covid) auf die Wochentage verteilen. 

### 2a)

- Berechnet die Totale Anzahl pro Wochentag pro Phase. Das brauchen wir nicht weiter für unsere Berechnungen, kann aber später ein nützliches Resultat für den Bericht sein.

```{r eval=FALSE}
mean_phase_wd <- depo_d |> 
  group_by(...) |> 
  ...
```

- Speichert das als .csv

```{r  eval=FALSE}
write.csv(mean_phase_wd, "results/mean_phase_wd.csv")
```

### 2b)

- Erstellt einen Boxplot nach untenstehender Vorgabe:

```{r echo=FALSE}
ggplot(data = depo_d) +
  geom_boxplot(mapping = aes(x = Wochentag, y = Total, fill = Phase)) +
  labs(title = "", y = "Fussgänger:innen pro Tag") +
  scale_fill_manual(values = c("lightgray", "royalblue", "red4", "orangered", "gold2")) +
  theme_classic(base_size = 15) +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    legend.title = element_blank()
  )
```

__Hinweis:__ 
- Nutzt zum plotten __ggplot()__
- folgende Codeschnipsel helfen euch:

```{r eval=FALSE}
ggplot(data = depo_d) +
  geom_boxplot(mapping = aes(x = Wochentag, y = Total, fill = Phase)) +
  ...
```

- Exportiert auch diesen Plot mit __ggsave()__. Welche Breite und Höhe passt hier?

### 2c)

Sind die Unterschiede zwischen Werktag und Wochenende wirklich signifikant? Falls ja, in allen Phasen oder nur während bestimmter?

- Prüft das pro Phase mit einem einfachen t.test.

## Aufgabe 3: Tagesgang

Vom Grossen zum Kleinen, von der Übersicht ins Detail. Jetzt widmen wir uns dem Tagesgang, das heisst der Verteilung der Besuchenden auf die 24 Tagesstunden je nach Phase.

### 3a)

- Berechnet zuerst den Mittelwert der Totalen Besuchszahlen pro Wochentag pro Stunde pro Phase. (ganz ähnlich wie unter 2a) und speichert das df unter __Mean_h__.

Vergewissert euch vor dem Plotten, dass der Datensatz im long-Format vorliegt.

### 3b)

- Plottet den Tagesgang, unterteilt nach den 7 Wochentagen nun für unsere 5 Phasen.

```{r echo=FALSE} 
Mean_h <- depo |>
  group_by(Wochentag, Stunde, Phase) |>
  summarise(Total = mean(Total))

ggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +
  geom_line(size = 2) +
  scale_colour_viridis_d() +
  scale_linetype_manual(values = c(rep("solid", 5), "twodash", "twodash")) +
  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2))) +
  facet_grid(rows = vars(Phase)) +
  labs(x = "Uhrzeit [h]", y = "∅ Fussganger_Innen / h", title = "") +
  lims(y = c(0, 25)) +
  theme_linedraw(base_size = 15)
```

__Hinweis:__ 
- Nutzt zum plotten __ggplot()__
- folgende Codeschnipsel helfen euch:

```{r eval=FALSE}
ggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +
  geom_line(size = 2) +
  facet_grid(...)
...
```

## Aufgabe 4: Kennzahlen

Schliesslich berechnen wir noch einige Kennzahlen (Anzahl Passagen, Richtungsverteilung, ...).

### 4a)

- Gruppiert nach Phase und Tageszeit und berechnet dieses mal die Summe (nicht den Durchschnitt) Total, IN und OUT (ähnlich wie in 2a und 3a).
- Nehmt dafür das vorbereitete df "depo_daytime"
- Speichert das das neu erstellte data.frame als .csv. Dieses .csv brauchen wir für keine weiteren Auswertungen, es enthällt für den Bericht aber nützliche Kennzahlen.

### 4b) 

Die Zeitreihen der 5 Phasen unterscheiden sich deutlich voneinander. Totale Summen sind da kaum miteinander vergleichbar, besser eignet sich der Durchschnitt oder der Median.

- Gruppiert nach Phase und Tageszeit und berechnet den Durchschnitt Total, IN und OUT und speichert das df unter __mean_phase_d__.
- Ergänzt das mit der prozentualen Richtungsverteilung

```{r eval=FALSE}
mean_phase_d <- mean_phase_d |> 
  mutate(Proz_IN = round(100/Total*IN, 1)) |> # berechnen und auf eine Nachkommastelle runden
  ...
```

### 4c)

Schliesslich soll das Ergebnis noch visualisiert werden. 

- Erstellt einen Plot nach untenstehendem Beispiel und speichert ihn:

```{r echo=FALSE}
# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange
mean_phase_d <- depo_daytime |>
  group_by(Phase, Tageszeit) |>
  summarise(
    Total = mean(Total),
    IN = mean(Fuss_IN),
    OUT = mean(Fuss_OUT)
  )
# berechne prozentuale Richtungsverteilung
mean_phase_d <- mean_phase_d |>
  mutate(Proz_IN = round(100 / Total * IN, 1)) |> # berechnen und auf eine Nachkommastelle runden
  mutate(Proz_OUT = round(100 / Total * OUT, 1))

ggplot(mean_phase_d, mapping = aes(Phase, Total, fill = Tageszeit)) +
  geom_col(position = "fill") +
  scale_fill_manual(values = mycolors) +
  theme_classic(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "", y = "Verteilung Fussgänger:innen nach Tageszeit [%]", x = "Phase")
```

