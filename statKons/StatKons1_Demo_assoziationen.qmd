---
date: 2022-11-14
lesson: StatKons1
thema: Statistik Grundlagen
index: 1
format:
  html:
    code-tools:
      source: true
---

# StatKons1: Demo

- Download dieses Demoscript via "\</\>Code" (oben rechts)

## Grundlagen

```{r}
#| echo: false
#| results: hide

#lade Packages
library(ggplot2)
library(dplyr)
library(tibble)

#mytheme
mytheme <- 
  theme_classic() + 
  theme(
    axis.line = element_line(color = "black"), 
    axis.text = element_text(size = 20, color = "black"), 
    axis.title = element_text(size = 20, color = "black"), 
    axis.ticks = element_line(size = 1, color = "black"), 
    axis.ticks.length = unit(.5, "cm")
  )
```

```{r, message=FALSE, eval=TRUE}
#lade Daten
# mehr Info darüber: https://cran.r-project.org/web/packages/explore/vignettes/explore_mtcars.html
cars <- mtcars

#neue kategoriale variable
cars <-  
  as_tibble(cars) |> # da "nur" data frame kann glimplse nichts damit anfangen 
  mutate(vs_cat = if_else(vs == 0, "normal", "v-type")) |> 
  mutate(am_cat = if_else(am == 0, "automatic", "manual"))

# betrachte die Daten
summary(cars)
glimpse(cars)

#Assoziation zwischen Anzahl Zylinder und Motorentyp ()
table(cars$vs_cat, cars$am_cat) # Achtung: sieht aus, als gäbe es weniger V-Motoren bei den handgeschalteten Autos

#lass und das überprüfen
#achtung: bei chi-square test kommt es sehr auf das format drauf an (er erwartet entweder vektoren oder eine matrix!)

#exkurs um in es in ein matrix form zu bringen
chi_sq_matrix <- xtabs(~ vs_cat + am_cat, data = as.data.frame(cars)) # in diesem Spezialfall haben wir keine Kriteriumsvariable

#1.version
chi_sq <-chisq.test(chi_sq_matrix)

#2. version
chi_sq <- chisq.test(cars$am_cat, cars$vs_cat)

#resp. fisher exacter test verwenden, da 2x2 table
fisher.test(chi_sq_matrix)

#fisher exakter test
fisher.test(cars$am_cat, cars$vs_cat)

#visualisieren: kudos goes to https://mgimond.github.io/Stats-in-R/ChiSquare_test.html#3_two_factor_classification
OP <- par(mfrow=c(1,2), "mar"=c(1,1,3,1))
mosaicplot(chi_sq$observed, cex.axis =1 , main = "Observed counts")
mosaicplot(chi_sq$expected, cex.axis =1 , main = "Expected counts\n(if class had no influence)")
par(OP)
```

## Möglicher Text für Ergebnisse

Der $\chi^2$-Test sagt uns, dass das Art des Motors und Art des Fahrwerks statistisch nicht zusammenhängen. Es gibt keine signifikante Unterscheide zwischen den Variablen "VS" und "AM - Transmission" (*p* = .555). Der Fisher exacter Test bestätigt diesen Befund.
Die Odds Ratio (OR) sagt uns hingegen - unter der Prämisse, dass "normale" Motoren eher mit automatischen und V-Motoren eher mit handgeschalteten Fahrwerken ausgestattet sind - dass die Chance doppelt so hoch ist, dass ein Auto mit "normalem" Motor automatisch geschaltet ist, als dies bei einem Auto mit V-Motor der Fall wäre

```{r, eval=TRUE}
#define dataset
cars <- mtcars

#neue kategoriale variable
cars <- 
  as_tibble(cars) |> # da "nur" data frame kann glimplse nichts damit anfangen 
  mutate(vs_cat = if_else(vs == 0, "normal", "v-type")) |> 
  mutate(am_cat = if_else(am == 0, "automatic", "manual"))

# bei t-Test immer zuerst visualisieren: in diesem Fall Boxplot mit Variablen Getriebe (v- vs. s-motor) und Anzahl Pferdestärke
ggplot2::ggplot(cars, aes(y = hp, x = vs_cat)) +
  stat_boxplot(geom ='errorbar', width = .25) +
  geom_boxplot() +
  # geom_violin()+
  labs(x = "\nBauform Motor", y = "Pferdestärke (PS)\n") +
  mytheme
  
#alternativ     
boxplot(cars$hp ~ cars$vs_cat) # sieht ganz ok aus, jedoch weist die variable "normale Motoren" deutlich eine grössere Streuung aus -> siehe aov.1 und deren Modelgüte-Plots

# Definiere Model: t-Test, wobei die AV metrisch (in unserem Fall eine Zählvariable) sein muss
ttest <- t.test(cars$hp ~ cars$vs_cat)
aov.1 <- aov(cars$hp ~ cars$vs_cat)

#schaue Modellgüte an
par(mfrow = c(2,2))
plot(aov.1)

#zeige resultate
ttest
summary.lm(aov.1)

#wie würdet ihr nun die Ergebnisse darstellen?
```

```{r}
# für mehr infos here: https://cran.r-project.org/web/packages/datasauRus/vignettes/Datasaurus.html

library(datasauRus)
if(requireNamespace("dplyr")){
  suppressPackageStartupMessages(library(dplyr))
  dt <- datasaurus_dozen |> 
    group_by(dataset) |> 
    summarize(
      mean_x    = mean(x),
      mean_y    = mean(y),
      std_dev_x = sd(x),
      std_dev_y = sd(y),
      corr_x_y  = cor(x, y)
    )
}

# check data structure
glimpse(dt)

# plot two examples  
if(requireNamespace("ggplot2")){
  library(ggplot2)
  
  dt = filter(datasaurus_dozen, dataset == "dino" | dataset == "slant_up")
  
  ggplot(dt, aes(x=x, y=y, colour=dataset))+
    geom_point()+
    theme_bw() +
    theme(legend.position = "none") +
    facet_wrap(~dataset) +
    geom_smooth(method = "lm", se = FALSE)
  
}
```
