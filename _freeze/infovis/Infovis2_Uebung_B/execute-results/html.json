{
  "hash": "ea7d23a875ccf6d78626485c0d1aea45",
  "result": {
    "markdown": "---\ndate: 2022-10-25\nlesson: InfoVis2\nthema: Vertiefung ggplot\nindex: 3\nexecute: \n  echo: true   # set to true to show musterlösung\n  output: false\ncode-fold: true\ncode-summary: \"Musterlösung\"\nknitr:\n  opts_chunk: \n    collapse: true\n---\n\n\n# Infovis 2: Übung B\n\nIn dieser Übung bauen wir einige etwas unübliche Plots aus der Vorlesung nach. Dafür verwenden wir Datensätze, die in R bereits integriert sind. Eine Liste dieser Datensätze findet man [hier](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html) oder mit der Hilfe `?datasets`.\n\nDazu verwenden wir nach wie vor `ggplot2`, aber mit einigen Tricks.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(\"dplyr\")\nlibrary(\"tidyr\")\nlibrary(\"ggplot2\")\n```\n:::\n\n\n## Aufgabe 1: Parallel coordinate plots\n\nErstelle einen [parallel coordinate plot](https://en.wikipedia.org/wiki/Parallel_coordinates). Dafür eignet sich der integrierte Datensatz [`mtcars`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html). Extrahiere die Fahrzeugnamen mit `rownames_to_column`. \n\nZudem müssen die Werte jeweiles auf eine gemeinsame Skala normalisiert werden. Hierfür kannst du die Funktion `scales::rescale` verwenden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars2 <- mtcars |>\n  tibble::rownames_to_column(\"car\") |>\n  pivot_longer(-car)\n\nmtcars2 <- mtcars2 |>\n  group_by(name) |>\n  mutate(value_scaled = scales::rescale(value))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nSo sieht der fertige Plot aus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars2 <- mtcars2 |>\n  group_by(car) |>\n  mutate(gear = value[name == \"gear\"])\n\nggplot(mtcars2, aes(name, value_scaled, group = car, color = factor(gear))) +\n  geom_point() +\n  geom_line() +\n  theme_minimal() +\n  theme(legend.position = \"none\", axis.title.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_B_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 2: Polar Plot mit Biber Daten\n\nPolar Plots eignen sich unter anderem für Daten, die zyklischer Natur sind, wie zum Beispiel zeitlich geprägte Daten (Tages-, Wochen-, oder Jahresrhythmen). Aus den Beispiels-Datensätzen  habe ich zwei Datensätze gefunden, die zeitlich geprägt sind:\n\n- [`beaver1` und `beaver2`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/beavers.html)\n- [`AirPassenger`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/AirPassengers.html)\n\nBeide Datensätze müssen noch etwas umgeformt werden, bevor wir sie für einen Radialplot verwenden können. In Aufgabe 2 verwenden wir die Biber-Datensätze, in der nächsten Aufgabe (3) die Passagier-Daten.\n\nWenn wir die Daten von beiden Bibern verwenden wollen, müssen wir diese noch zusammenfügen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeaver1_new <- beaver1 |>\n  mutate(beaver = \"nr1\")\n\nbeaver2_new <- beaver2 |>\n  mutate(beaver = \"nr2\")\n\nbeaver_new <- rbind(beaver1_new,beaver2_new)\n```\n:::\n\n\nZudem müssen wir die Zeitangabe noch anpassen: Gemäss der [Datenbeschreibung](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/beavers.html) handelt es sich bei der Zeitangabe um ein sehr programmier-unfreundliches Format. 3:30 wird als \"0330\" notiert. Wir müssen diese Zeitangabe, noch in ein Dezimalsystem umwandeln:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeaver_new <- beaver_new |>\n  mutate(\n    hour_dec = (time/100)%/%1,         # Ganze Stunden (mittels ganzzaliger Division)\n    min_dec = (time/100)%%1/0.6,       # Dezimalminuten (15 min wird zu 0.25, via Modulo)\n    hour_min_dec = hour_dec+min_dec    # Dezimal-Zeitangabe (03:30 wird zu 3.5)\n    ) \n```\n:::\n\n\nSo sieht der fertige Plot aus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lösung Aufgabe 2\n\nbeaver_new |>\n  ggplot(aes(hour_min_dec, temp, color = beaver)) +\n  geom_point() +\n  scale_x_continuous(breaks = seq(0,23,2)) +\n  coord_polar() +\n  theme_minimal() +\n  theme(axis.title =  element_blank())\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_B_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 3: Raster Visualisierung mit Flugpassagieren\n\nAnalog Aufgabe 2, dieses Mal mit dem Datensatz [`AirPassanger`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/AirPassengers.html)\n\n`AirPassengers` kommt in einem Format daher, das ich selbst noch gar nicht kannte. Es sieht zwar aus wie ein `data.frame` oder eine `matrix`, ist aber von der Klasse [`ts`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/ts.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAirPassengers\n\nclass(AirPassengers)\n```\n:::\n\n\nDamit wir den Datensatz verwenden können, müssen wir ihn zuerst in eine `matrix` umwandeln. Wie das geht habe ich [hier](https://stackoverflow.com/a/5332664/4139249) erfahren.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAirPassengers2 <- tapply(AirPassengers, list(year = floor(time(AirPassengers)), month = month.abb[cycle(AirPassengers)]), c)\n\nAirPassengers2\n```\n:::\n\n\nAus der `matrix` muss noch ein Dataframe her, zudem müssen wir aus der breiten Tabelle eine lange Tabelle machen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAirPassengers3 <- AirPassengers2 |>\n  as.data.frame() |>\n  tibble::rownames_to_column(\"year\") |>\n  pivot_longer(-year, names_to = \"month\", values_to = \"n\") |>\n  mutate(\n    # ich nutze einen billigen Trick um ausgeschriebene Monate in Nummern umzuwandeln\n    month = factor(month, levels = month.abb,ordered = T),\n    month_numb = as.integer(month),\n    year = as.integer(year)\n  )\n```\n:::\n\n\nSo sieht der fertige Plot aus: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(AirPassengers3, aes(month, year, fill = n)) +\n  geom_raster() +\n  scale_y_reverse() +\n  scale_fill_viridis_c(guide = guide_colourbar(barwidth = 15, title.position = \"top\")) +\n  theme_minimal() +\n  labs(fill = \"Anzahl Passagiere\") +\n  coord_equal() +\n  theme(axis.title = element_blank(), legend.position = \"bottom\") \n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_B_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Infovis2_Uebung_B_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}