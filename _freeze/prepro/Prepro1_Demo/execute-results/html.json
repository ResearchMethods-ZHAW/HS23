{
  "hash": "66febac6f9e20e36281142e46ab95cbc",
  "result": {
    "markdown": "---\ndate: 2022-10-11\nlesson: PrePro1\nthema: Datentypen\nindex: 1\nknitr:\n  opts_chunk: \n    collapse: true\n---\n\n\n# Prepro 1: Demo\n\nDiese Demo kann auch als [R Script heruntergeladen werden](Prepro1_Demo.R) (Rechtsklick → *Save Target As..*)\n\n### Datentypen\n\n#### Numerics\n\nUnter die Kategorie `numeric` fallen in R zwei Datentypen:\n\n-   `double`: Gleitkommazahl (z.B. 10.3, 7.3)\n-   `integer`: Ganzzahl (z.B. 10, 7)\n\n##### Doubles\n\nFolgendermassen wird eine Gleitkommazahl einer Variabel zuweisen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10.3\n\nx\n## [1] 10.3\n\ntypeof(x)\n## [1] \"double\"\n```\n:::\n\n\nStatt `<-` kann auch `=` verwendet werden. Dies funktioniert aber nicht in allen Situationen, und ist zudem leicht mit `==` zu verwechseln.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = 7.3\n\ny\n## [1] 7.3\n```\n:::\n\n\nOhne explizite Zuweisung nimmt R immer den Datentyp `double`an:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 42\ntypeof(z)\n## [1] \"double\"\nis.integer(z)\n## [1] FALSE\nis.numeric(z)\n## [1] TRUE\nis.double(z)\n## [1] TRUE\n```\n:::\n\n\n#### Ganzzahl / Integer\n\nErst wenn man eine Zahl explizit als `integer` definiert (mit `as.integer()` oder `L`), wird sie auch als solches abgespeichert.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- as.integer(z)\nis.numeric(a)\n## [1] TRUE\nis.integer(a)\n## [1] TRUE\n\nc <- 8L\nis.numeric(c)\n## [1] TRUE\nis.integer(c)\n## [1] TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(a)\n## [1] \"integer\"\n\nis.numeric(a)\n## [1] TRUE\nis.integer(a)\n## [1] TRUE\n```\n:::\n\n\nMit `c()` können eine Reihe von Werten in einer Variabel zugewiesen werden (als `vector`). Es gibt zudem auch `character vectors`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector <- c(10,20,33,42,54,66,77)\nvector\n## [1] 10 20 33 42 54 66 77\nvector[5]\n## [1] 54\nvector[2:4]\n## [1] 20 33 42\n\nvector2 <- vector[2:4]\n```\n:::\n\n\nEine Ganzzahl kann explizit mit `as.integer()` definiert werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- as.integer(7)\nb <- as.integer(3.14)\na\n## [1] 7\nb\n## [1] 3\ntypeof(a)\n## [1] \"integer\"\ntypeof(b)\n## [1] \"integer\"\nis.integer(a)\n## [1] TRUE\nis.integer(b)\n## [1] TRUE\n```\n:::\n\n\nEine Zeichenkette kann als Zahl eingelesen werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- as.integer(\"3.14\")\nc\n## [1] 3\ntypeof(c)\n## [1] \"integer\"\n```\n:::\n\n\n#### Logische Abfragen\n\nWird auch auch als boolesch (Eng. **boolean**) bezeichnet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ne <- 3\nf <- 6\ng <- e > f\ne\n## [1] 3\nf\n## [1] 6\ng\n## [1] FALSE\ntypeof(g)\n## [1] \"logical\"\n```\n:::\n\n\n#### Logische Operationen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonnig <- TRUE\ntrocken <- FALSE\n\nsonnig & !trocken\n## [1] TRUE\n```\n:::\n\n\nOft braucht man auch das Gegenteil / die Negation eines Wertes. Dies wird mittels `!` erreicht\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- TRUE\nv <- !u \nv\n## [1] FALSE\n```\n:::\n\n\n#### Zeichenketten\n\nZeichenketten (Eng. **character**) stellen Text dar\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- as.character(3.14)\ns\n## [1] \"3.14\"\ntypeof(s)\n## [1] \"character\"\n```\n:::\n\n\nZeichenketten verbinden / zusammenfügen (Eng. **concatenate**)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfname <- \"Hans\"\nlname <- \"Muster\"\npaste(fname,lname)\n## [1] \"Hans Muster\"\n\nfname2 <- \"hans\"\nfname == fname2\n## [1] FALSE\n```\n:::\n\n\n#### `Factors`\n\nMit `Factors` wird in R eine Sammlung von Zeichenketten bezeichnet, die sich wiederholen, z.B. Wochentage (es gibt nur 7 unterschiedliche Werte für \"Wochentage\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwochentage <- c(\"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\n                \"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\", \"Montag\",\"Dienstag\",\"Mittwoch\")\n\ntypeof(wochentage)\n## [1] \"character\"\n\nwochentage_fac <- as.factor(wochentage)\n\nwochentage\n##  [1] \"Donnerstag\" \"Freitag\"    \"Samstag\"    \"Sonntag\"    \"Montag\"    \n##  [6] \"Dienstag\"   \"Mittwoch\"   \"Donnerstag\" \"Freitag\"    \"Samstag\"   \n## [11] \"Sonntag\"    \"Montag\"     \"Dienstag\"   \"Mittwoch\"\nwochentage_fac\n##  [1] Donnerstag Freitag    Samstag    Sonntag    Montag     Dienstag  \n##  [7] Mittwoch   Donnerstag Freitag    Samstag    Sonntag    Montag    \n## [13] Dienstag   Mittwoch  \n## Levels: Dienstag Donnerstag Freitag Mittwoch Montag Samstag Sonntag\n```\n:::\n\n\nWie man oben sieht, unterscheiden sich `character vectors` und `factors` v.a. dadurch, dass letztere über sogenannte `levels` verfügt. Diese `levels` entsprechen den eindeutigen Werten.\n\nZudem ist fällt auf, dass die Reihenfolge der Wohentag alphabetisch sortiert ist. Eine Ordnung kann man mit dem Befehl `ordered = T` festlegen, dabei muss die Reihenfolge der Werte im Argument `levels =` explizit festgehalten werden[^ordered].\n\n[^ordered]: `ordered = T` kann nur bei der Funktion `factor()` spezifiziert werden, nicht bei `as.factor()`. Ansonsten sind `factor()` und `as.factor()` sehr ähnlich.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(wochentage, levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\"), ordered = TRUE)\n##  [1] Donnerstag Freitag    Samstag    Sonntag    Montag     Dienstag  \n##  [7] Mittwoch   Donnerstag Freitag    Samstag    Sonntag    Montag    \n## [13] Dienstag   Mittwoch  \n## 7 Levels: Montag < Dienstag < Mittwoch < Donnerstag < Freitag < ... < Sonntag\n```\n:::\n\n\nBeachtet das `<`-Zeichen zwischen den Levels!\n\n\n#### Zeit/Datum\n\nUm in R mit Datum/Zeit Datentypen umzugehen, müssen sie als `POSIXct` eingelesen werden. Anders als Beispielsweise bei Excel, sollten in R Datum und Uhrzeit immer **zusammen** gespeichert werden (in *einem* Objekt oder *einem* Vektor).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatum <- \"2017-10-01 13:45:10\"\n\n# konvertiert character in POSIXct:\nas.POSIXct(datum) \n## [1] \"2017-10-01 13:45:10 UTC\"\n```\n:::\n\n\nWenn das die Zeichenkette in dem obigen Format (`Jahr-Monat-Tag Stunde:Minute:Sekunde`) daher kommt, braucht `as.POSIXct`keine weiteren Informationen. \n\nSollte das Format von dem aber Abweichen, muss man der Funktion das genaue Schema jedoch mitteilen. Der Syntax dafür kann via `?strptime` nachgeschlagen werden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatum <- \"01.10.2017 13:45\"\n\n# konvertiert character in POSIXct:\nas.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\n## [1] \"2017-10-01 13:45:00 UTC\"\n\ndatum <- as.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\n```\n:::\n\n\nBeachtet, dass in den den obigen Beispiel R automatisch eine Zeitzone angenommen hat (`CEST`). R geht davon aus, dass die Zeitzone der **System Timezone** (`Sys.timezone()`) entspricht.\n\nUm nun aus dem Datum wieder Spezifische bestandteile zu extrahieren, kann man theoretisch die gleichen Codes nochmal verwenden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstrftime(datum, format = \"%m\") # extrahiert den Monat als Zahl\n## [1] \"10\"\nstrftime(datum, format = \"%b\") # extrahiert den Monat mit Namen (abgekürzt)\n## [1] \"Oct\"\nstrftime(datum, format = \"%B\") # extrahiert den Monat mit Namen (ausgeschrieben)\n## [1] \"October\"\n```\n:::\n\n\nEinfacher sind an dieser Stelle aber die Functions aus lubridate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"lubridate\")\n\nmonth(datum)                             # extrahiert den Monat als Zahl\n## [1] 10\nmonth(datum, label = TRUE, abbr = TRUE)  # extrahiert den Monat mit Namen (abgekürzt)\n## [1] Oct\n## 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\nmonth(datum, label = TRUE, abbr = FALSE) # extrahiert den Monat mit Namen (ausgeschrieben)\n## [1] October\n## 12 Levels: January < February < March < April < May < June < ... < December\n```\n:::\n\n\n\n### Data Frames und Conveniance Variabeln\n\nEine `data.frame` ist die gängigste Art, Tabellarische Daten zu speichern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  Stadt = c(\"Zürich\",\"Genf\",\"Basel\",\"Bern\",\"Lausanne\"),\n  Einwohner = c(396027,194565,175131,140634,135629),\n  Ankunft = c(\"1.1.2017 10:00\",\"1.1.2017 14:00\",\n              \"1.1.2017 13:00\",\"1.1.2017 18:00\",\"1.1.2017 21:00\")\n)\n\nstr(df)\n## 'data.frame':\t5 obs. of  3 variables:\n##  $ Stadt    : chr  \"Zürich\" \"Genf\" \"Basel\" \"Bern\" ...\n##  $ Einwohner: num  396027 194565 175131 140634 135629\n##  $ Ankunft  : chr  \"1.1.2017 10:00\" \"1.1.2017 14:00\" \"1.1.2017 13:00\" \"1.1.2017 18:00\" ...\n```\n:::\n\n\nIn der obigen `data.frame` wurde die Spalte `Einwohner` als Fliesskommazahl abgespeichert. Dies ist zwar nicht tragisch, aber da wir wissen das es sich hier sicher um Ganzzahlen handelt, können wir das korrigieren. Wichtiger ist aber, dass wir die Ankunftszeit (Spalte`Ankunft`) von einem `Factor` in ein Zeitformat (`POSIXct`) umwandeln.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Einwohner <- as.integer(df$Einwohner)\n\ndf$Einwohner\n## [1] 396027 194565 175131 140634 135629\n\ndf$Ankunft <- as.POSIXct(df$Ankunft, format = \"%d.%m.%Y %H:%M\")\n\ndf$Ankunft\n## [1] \"2017-01-01 10:00:00 UTC\" \"2017-01-01 14:00:00 UTC\"\n## [3] \"2017-01-01 13:00:00 UTC\" \"2017-01-01 18:00:00 UTC\"\n## [5] \"2017-01-01 21:00:00 UTC\"\n```\n:::\n\n\nDiese Rohdaten können nun helfen, um Hilfsvariablen (**convenience variables**) zu erstellen. Z.B. können wir die Städte einteilen in gross, mittel und klein.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Groesse[df$Einwohner > 300000] <- \"gross\"\ndf$Groesse[df$Einwohner <= 300000 & df$Einwohner > 150000] <- \"mittel\"\ndf$Groesse[df$Einwohner <= 150000] <- \"klein\"\n\ndf$Groesse\n## [1] \"gross\"  \"mittel\" \"mittel\" \"klein\"  \"klein\"\n```\n:::\n\n\nOder aber, die Ankunftszeit kann von der Spalte `Ankunft`abgeleitet werden. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Ankunft_stunde <- hour(df$Ankunft)\n\ndf$Ankunft_stunde\n## [1] 10 14 13 18 21\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}